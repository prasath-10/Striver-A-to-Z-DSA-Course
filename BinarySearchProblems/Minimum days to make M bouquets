class Solution {
    boolean possible(int[] bloomDay,int days,int m,int k){
        int c=0;
        int total=0;
        for(int i=0;i<bloomDay.length;i++)
        {
            if(bloomDay[i]<=days){
                c++;
            }
            else{
                total=total+(c/k);
                c=0;
            }
        }
        total=total+(c/k);
        return total >= m;
    }
    public int minDays(int[] bloomDay, int m, int k) {
        long n = (long) m * k;
        if(n>bloomDay.length){
            return -1;
        }
        int min=bloomDay[0];
        int max=bloomDay[0];
        for(int i=1;i<bloomDay.length;i++)
        {
            if(bloomDay[i]>max){
                max=bloomDay[i];
            }
            if(bloomDay[i]<min){
                min=bloomDay[i];
            }
        }
        int low=min;
        int high=max;
        while(low <= high){
            int mid=(low+high)/2;
            if(possible(bloomDay,mid,m,k)){
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        return low;
        

        
    }
}
